from tables import *
import random
import torch


def random_batch_gen(batch_size, file_name):
    """Generate a random batch for the net.

    Args:
        batch_size: the batch size that the net is trained on
        file_name: the file name containing training data
            generated by gen_training_sets_mod.py

    Returns:
        A tuple containing three tensors representing st, a, and st1 (in
        that order). Random rows from file_name are used to generate tensors
        and information in all three tensors match up to same rows. Number of
        rows sampled is determined by batch_size.
    """
    # Opens file
    file_handle = open_file(file_name, mode='a')
    root = file_handle.root
    sets = root.Training.sets

    # lists that store cells of HDF5 file
    store_st = []
    store_st1 = []
    store_a = []

    # samples same number of random rows as batch_size
    for x in range(0, batch_size):

        # generates random index between 0 and number of rows
        rand_index = random.randint(0, sets.shape[0])

        # adds st, st1 and a information from row to corresponding list
        store_st.append(sets[rand_index]['st'])
        store_st1.append(sets[rand_index]['st1'])
        store_a.append(sets[rand_index]['at'])

    # converts st, a, and st1 lists to tensors
    st_tensor = torch.tensor(store_st)
    st1_tensor = torch.tensor(store_st1)
    sta_tensor = torch.tensor(store_a)

    return st_tensor, st1_tensor, sta_tensor


